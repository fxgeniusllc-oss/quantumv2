# CI/CD Pipeline Configuration for GitHub Actions
name: Quantum Trading System CI/CD

on:
  push:
    branches: [ main, develop, copilot/** ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

# Global permissions
permissions:
  contents: read

jobs:
  # Linting and code quality
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black
          
      - name: Run flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Check code formatting with black
        run: black --check .

  # Unit and integration tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install Node.js dependencies
        run: npm ci
        
      - name: Run Python tests
        run: |
          pytest tests/ -v --cov=quantum_market_domination --cov-report=xml --cov-report=html
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          pip install -r requirements.txt
          
      - name: Run safety check
        run: safety check --json
        continue-on-error: true
        
      - name: Run bandit security scan
        run: bandit -r quantum_market_domination/ -f json -o bandit-report.json
        continue-on-error: true
        
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json

  # Build Docker image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: quantum/trading-system
          tags: |
            type=ref,event=branch
            type=sha
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    permissions:
      contents: read
    environment:
      name: staging
      url: https://staging.quantum-trading.example.com
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment"
          # Add actual deployment commands here
          
  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    environment:
      name: production
      url: https://quantum-trading.example.com
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production server
        run: |
          echo "Deploying to production environment"
          # Add actual deployment commands here
          
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    permissions: {}
    
    steps:
      - name: Send Slack notification
        if: always()
        run: |
          echo "Sending deployment notification"
          # Add Slack webhook notification here
