# Docker Compose configuration for Quantum Market Domination System
version: '3.8'

services:
  # Main trading application
  quantum-trader:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: quantum-trader
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./secrets:/app/secrets:ro
      - ./logs:/app/logs
      - ./data:/app/data
    env_file:
      - .env
    networks:
      - quantum-network
    depends_on:
      - redis
    command: python main.py

  # DeFi strategy runner
  defi-strategy:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: defi-strategy
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./secrets:/app/secrets:ro
      - ./logs:/app/logs
      - ./data:/app/data
    env_file:
      - .env
    networks:
      - quantum-network
    depends_on:
      - redis
    command: python defi_main.py

  # Redis for distributed locking and caching
  redis:
    image: redis:7-alpine
    container_name: quantum-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - quantum-network
    command: redis-server --appendonly yes

  # Optional: Monitoring with Prometheus
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: quantum-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus-data:/prometheus
  #   networks:
  #     - quantum-network

  # Optional: Grafana for visualization
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: quantum-grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   networks:
  #     - quantum-network
  #   depends_on:
  #     - prometheus

volumes:
  redis-data:
  # prometheus-data:
  # grafana-data:

networks:
  quantum-network:
    driver: bridge
